#+tittle: Web Application that uses Spring Boot framework
#+LANGUAGE: EN
#+AUTHOR: MySelf.1664
#+STARTUP: overview

* About
* Installation
** TODO Install docker
#+begin_src bash
  #update ubuntu
  apt update
  apt upgrade
#+end_src

** Get code
#+BEGIN_SRC src
git clone git@github.com:davidrcuervo/spring.git
#+END_SRC

** Crete private folders and keys.
- $APP_ROOT_FOLDER$
  + docker
    - private
      - keys
	* docker.key
	* docker.key.pub
	* kc.private.key
	* kc.unsecure.key
	* kc.crt
	* webapp.crt
	* webapp.private.key
	* webapp.unsecure.key
      - admuser-password.txt
      - jasypt-password.txt
      - sampsepi0l-password.txt
    - Software

** Download software
Download software to folder %APP_ROOT_FOLDER%/docker/private/Software

+ [ ] jdk-21.0.6_linux-x64_bin.tar.gz | Link: [[https://www.oracle.com/ca-en/java/technologies/downloads/#java21][Java SE Development Kit 21.0.6 downloads]]
+ [ ] apache-maven-3.9.9-bin.tar.gz | Link: [[https://maven.apache.org/download.cgi][Downloading Apache Maven 3.9.9]]
+ [ ] jasypt-1.9.3-dist.zip | Link: [[https://github.com/jasypt/jasypt/releases/download/jasypt-1.9.3/jasypt-1.9.3-dist.zip][jasypt 1.9.3 (binaries and javadocs)]]
+ [ ] keycloak-26.1.5.zip | Link: [[https://www.keycloak.org/archive/downloads-26.1.5.html][Keycloak Downloads 26.1.5]]

** Create key
+ Copy github key in %APP_ROOT_FOLDER%/docker/private/keys
+ Copy certifcates anp copy them to %APP_ROOT_FOLDER%/docker/private/keys
** create passwords [0/3]
+ [ ] admuser-password.txt
+ [ ] samsepi0l-password.txt
+ [ ] jasypt-password.txt

** Edit environmental file
%APP_ROOT_FOLDER%/docker/.env

** Build docker images
#+begin_src bash
  #find docker group id
  cat /etc/group | grep docker

  #build docker images
  docker copose build --no-cache --build-arg DOCKER_GID=999
#+end_src

* Test and Run
** Run Junit test
#+BEGIN_SRC intellij
  -ea -Djasypt.encryptor.password=secret -Dspring.config.additional-location=C:\Users\I849921\IdeaProjects\spring\API\,C:\Users\I849921\IdeaProjects\spring\
#+END_SRC
** Run
#+BEGIN_SRC shell
  #0. Ideally it should works by only running the following command, but that is not ready. So that, steps 1. 2. and 3 must be completed instead
  dockerm compose up -dx

  #1. Run database and keycloak container
  docker compose up -d postgreset keycloaket

  #2. Test if keycloak is up and ready to accept connections
  kcadm.sh config credentials --server http://127.0.0.1:8001 --realm master --user etadmuser

  #3. Run keycloak configuration container
  docker compose up keycloaketcnf
#+END_SRC
** Security
** Database
** OpenLdap
* API

** v0

| ACTION | URL          | METHOD | BODY |
|--------+--------------+--------+------|
| USER:  | /api/v0/user |        |      |
|--------+--------------+--------+------|
| * add  | /add         | POST   |      |
| * show | /show/{id}   | GET    |      |
|        |              |        |      |

* Appendix
** Install Java
#+begin_src shell
  #Extract java

  #Set java environmental variables
  export JAVA_HOME=/opt/java/jdk-21.0.6
  export PATH=$JAVA_HOME/bin:$PATH
#+end_src

** Install Maven
#+begin_src shell

  #1. Uncompress maven
   tar -xzvf Software/apache-maven-3.9.9-bin.tar.gz -C /opt/maven/

  #2. Set envrionment variables
  export M2_HOME=/opt/myjava/apache-maven-3.9.9
  export M2=$M2_HOME/bin
  export PATH="$M2:$PATH"

#+end_src

** Install keycloak
#+begin_src shell
  #1. Uncompress keycloak
  unzip Software/keycloak-26.1.5.zip -d /opt/keycloak

  #2. Add bin to path env variable
  export KC_HOME=/opt/keycloak/keycloak-26.1.5
  export PATH="$KC_HOME/bin:$PATH"
#+end_src

** Encrypt passwords
*** Encrypt by using jasypt bin script 
#+BEGIN_SRC shell
# ENCRYPT
/opt/jasypt/jasypt-1.9.3/bin/encrypt.sh algorithm="PBEWITHHMACSHA512ANDAES_256" saltGeneratorClassName="org.jasypt.salt.RandomSaltGenerator" ivGeneratorClassName="org.jasypt.iv.RandomIvGenerator" \
password="password" input="plainsecretpassword"

#DECRYPT
/opt/jasypt/jasypt-1.9.3/bin/decrypt.sh algorithm="PBEWITHHMACSHA512ANDAES_256" saltGeneratorClassName="org.jasypt.salt.RandomSaltGenerator" ivGeneratorClassName="org.jasypt.iv.RandomIvGenerator" \
password="password" input="encryptedsecretpassword"

#+END_SRC
*** Encrypt by using maven plugin
#+begin_src shell
  #ENCRYPT
  mvn jasypt:encrypt-value -Djasypt.encryptor.password="password" -Djasypt.plugin.value="DEC(plain)" -f pom.xml

  #DECRYPT
  mvn jasypt:decrypt-value -Djasypt.encryptor.password="password" -Djasypt.plugin.value="ENC(encrypted)" -f pom.xml

#+end_src

** Create a self signed certificate
*** Commands
#+BEGIN_SRC shell
  # Create private key with password
  openssl genrsa -aes256 -out private.key 4096

  # Remove password protection from private key
  openssl rsa -in private.key -out unsecure.key

  # Create certificate
  openssl req -x509 -key unsecure.key -config config.cfg -out certificate.crt
#+END_SRC

*** Example of config.cfg file
#+BEGIN_SRC shell
[req]
distinguished_name=req_distinguished_name
x509_extensions=v3_req
prompt=no

[req_distinguished_name]
C=CA
ST=Quebec
L=Montreal
O=La eTienda
OU=Webapp IT
CN=webapp.com

[v3_req]
subjectAltName=@alt_names

[alt_names]
DNS.1=www.webapp.com
DNS.2=frontend
DNS.3=localhost
IP.1=127.0.0.1
#+END_SRC
*** Add self signed certificate to java keystore
#+BEGIN_SRC shell
  # Add certificate to java trusted certs
  %JAVA_HOME%\bin\keytool.exe -importcert -file 'C:\path\to\cert\cert.crt' -alias aliasName -keystore '%JAVA_HOME%\lib\security\cacerts'

  # List certificate by alias
  %JAVA_HOME%\bin\keytool.exe -list -alias webapp -keystore '%JAVA_HOME%\lib\security\cacerts'

  # Delete certificate by alias
  %JAVA_HOME%\bin\keytool.exe -delete -alias webapp -keystore '%JAVA_HOME%\lib\security\cacerts
#+END_SRC
* References 

+ Bootstrap: [[https://getbootstrap.com/docs/5.1/getting-started/introduction/][Bootstrap 5.1 Documentation]]


#  LocalWords:  API OpenLdap
